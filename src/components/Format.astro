---
import RichText from '../components/core/RichText.astro';
import LinkPulsante from '../components/core/LinkPulsante.astro';
const { pd, landingID } = Astro.props;
import { Image } from "astro:assets";
import fetchApi from '../lib/strapi';

// Define the interface for the pageData objectsContent[{ 
interface Content {
    progetti: { 
        id: number,
        titolo: string,
        sottotitolo: string,
        descrizione: string,
        immagine: [{}],
        ctaFormat: [{}],
    } 
};
interface Format {
    content?: Content[];
};
interface Counter {
    immagine: {
        url: string;
        alternativeText: string;
        width: number;
        height: number;
    },
    titolo: string,
    sottotitolo: string,
    descrizione: string,
    url: string,
    alternativeText: string,
    width: number,
    height: number,
    ctaProgetto: [],
};

/**
 * esempio link chiamata API
 * http://localhost:1337/api/landing-pages/yd9u9u9k5wtvej3e8sv0uf3h?populate[content][on][shared.slider-clienti][populate]=cliente.logo&populate[content][on][shared.slider-clienti][populate]=cliente.link
 */
const format: Format[] = await fetchApi({
	endpoint: `landing-pages/${landingID}`, 
	page: '', 
	wrappedByKey: 'data',
    query: {}, 
    wrappedByList: false, 
    locale: '', 

    // popolare con il nome del contenitore dinamico solo nel caso si voglia popolare un componente al suo interno a un livello dal secondo in poi
    secondLevel: 'content', 
    secondLevelQuery: '[on][shared.format]', 
    secondLevelTarget: ['progetti.immagine', 'progetti.ctaProgetto'], 
});

//let riga = format.content[0];

const logoUrl = import.meta.env.STRAPI_URL;

const content = format?.content[0] || []; // Use optional chaining and a fallback to an empty array
const progetti = format?.content[0].progetti || []; // Use optional chaining and a fallback to an empty array

//console.log(content.descrizione);
---

<section id="format" class="py-5">
    <div class="container">
        <div class="row d-lg-flex justify-content-lg-center pb-5">
            <div class="col col-lg-9 text-center">
                {content.titolo !== null && <h1 class="fw-bold text-uppercase">{content.titolo}</h1>}
                {content.descrizione !== null && <RichText block={content.descrizione} />}
            </div>
        </div>

        <div class="row d-flex justify-content-center">

            {progetti !== null && progetti.map((counter: Counter, index: number) => (
                <div class="col-11 col-lg-4" id={`progetto-${index+1}`}>
                    <div class="img-container w-100 pb-4 pb-lg-2">
                        {counter.immagine !== null && counter.immagine.map((counter: Counter, index: number) => (
                        <Image 
                            src={logoUrl+counter.url} 
                            class="img-fluid rounded-4" 
                            alt={counter.alternativeText ? counter.alternativeText : ""} 
                            width={counter.width} 
                            height={counter.height} 
                        />
                        ))}
                    </div>
                    <div class="content-container w-100 pb-5 mx-1">
                        {counter.titolo !== null && <h3 class="fw-bold lh-1 text-uppercase">{counter.titolo}</h3>}
                        {counter.sottotitolo !== null && <p class="fs-small fw-bold text-primary">{counter.sottotitolo}</p>}
                        {counter.descrizione !== null && <RichText block={counter.descrizione} />}

                        {counter.ctaProgetto !== null && 
                            <LinkPulsante param={counter.ctaProgetto} />
                        }

                    </div>
                </div>
            ))}

        </div>

        <div class="row d-flex justify-content-center">

            <div class="col-11 col-lg-4 text-center pt-5">

                {pd.ctaFormat !== null && 
                    <LinkPulsante param={pd.ctaFormat} />
                }

            </div>

        </div>
    </div>


</section>