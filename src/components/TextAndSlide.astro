---
import { onMount } from "astro/client";
import RichText from '../components/core/RichText.astro';
const { pd, landingID } = Astro.props;
import { Image } from "astro:assets";
import fetchApi from '../lib/strapi';

// Define the interface for the pageData objectsContent[{ 
interface Content {
    riga: { 
        id: number,
        titolo: string,
        sottotitolo: string,
        paragrafo1: string,
        paragrafo2: string,
        reverseColumn: boolean,
        slider: [{}],
    } 
};
interface TextSlide {
    content: Content[]
};
interface Counter {
    slider: {
        url: string;
        alternativeText: string;
        width: number;
        height: number;
    },
    reverseColumn: boolean,
    titolo: string,
    sottotitolo: string,
    paragrafo1: string,
    paragrafo2: string,
    url: string,
    alternativeText: string,
    width: number,
    height: number,
};

/**
 * esempio link chiamata API
 * http://localhost:1337/api/landing-pages/yd9u9u9k5wtvej3e8sv0uf3h?populate[content][on][shared.slider-clienti][populate]=cliente.logo&populate[content][on][shared.slider-clienti][populate]=cliente.link
 */
const textSlide: TextSlide[] = await fetchApi({

    // sostituire ID statico con ID dinamico passato con props in caso di più landing pages
	endpoint: `landing-pages/${landingID}`, 

    //lasciare vuoto se si cerca un ID particolare (es. landing-pages/yd9u9u9k5wtvej3e8sv0uf3h)
	page: '', 

	wrappedByKey: 'data',

    // Provide an empty object or appropriate query parameters
    query: {}, 

    // Provide a default value
    wrappedByList: false, 

    // Provide a default locale
    locale: '', 

    /**
     * USARE I TRE PARAMETRI SEGUENTI SOLO NEL CASO SPECIFICO DI POPOLAMENTO DI SECONDO LIVELLO E DI ID SPECIFICI
     * es. /api/landing-pages/yd9u9u9k5wtvej3e8sv0uf3h?populate[content][on][shared.slider-clienti][populate]=cliente.logo
     * es. /api/landing-pages/yd9u9u9k5wtvej3e8sv0uf3h?populate[content][on][shared.slider-clienti][populate]=cliente.link
     *              ^                     ^                         ^                   ^                         ^
     *              |                     |                         |                   |                         |
     *           endpoint           ID specifico        nome blocco dinamico     nome componente        nome sottocomponente
     */
    // popolare con il nome del contenitore dinamico solo nel caso si voglia popolare un componente al suo interno a un livello dal secondo in poi
    secondLevel: 'content', 

    // inserire la stringa che va a specificare quale componente popolare all'interno del blocco dinamico principale
    secondLevelQuery: '[on][shared.container-text-and-slide]', 

    // inserire il campo che si vuole popolare, creare array nel caso se ne vogliano popolare più di uno, lasciare una stringa semplice in caso contrario
    secondLevelTarget: 'riga.slider', 
});

let riga = textSlide.content[0];
let cont = riga.riga.length;

const logoUrl = import.meta.env.STRAPI_URL;

//console.log(riga.riga.length);
---

<section id="text-and-foto" class="py-3 py-lg-5">
    <div class="container-xl">

        {riga.riga && riga.riga.map((counter: Counter, index: number) => (
            <div 
                key={`slide-${index}`}
                class={counter.reverseColumn ? 'row d-flex flex-row-reverse justify-content-center' : 'row d-flex justify-content-center'} 
                id={`text-and-slide-${index}`} 
            >
                <div class="col-10 col-lg-7 col-xl-6 p-3 p-lg-5">
                    <div class="text-container pt-3 pb-2">

                        {counter.titolo && 
                        <h3 class="text-primary lh-1 fw-bold pb-3 text-uppercase">{counter.titolo}</h3>
                        }

                        {counter.paragrafo1 &&
                        <RichText block={counter.paragrafo1} />
                        }

                    </div>
                    <div class="text-container pt-2 pb-3">

                        {counter.sottotitolo && 
                        <h4 class="text-secondary lh-1 pb-3 text-uppercase">{counter.sottotitolo}</h4>
                        }

                        {counter.paragrafo2 && 
                        <RichText block={counter.paragrafo2} />
                        }

                    </div>
                </div> 

                <div class="col-11 offset-lg-0 col-lg-5 col-xl-6 p-3 p-lg-5 m-auto">
                    <div class={`swiper mySwiperTextSlide-${index+1} identifier`}>
                        <div class="swiper-wrapper">
                            {counter.slider && Array.isArray(counter.slider) && counter.slider.map((riga: Counter, i: number) => (
                            <div class="swiper-slide" key={`slide-img-${i}`}>
                                <Image 
                                src={logoUrl + riga.url} 
                                class="img-fluid rounded-4" 
                                alt={riga.alternativeText ?? ""} 
                                width={riga.width} 
                                height={riga.height} 
                                />
                            </div>
                            ))}
                        </div>
                        <div class="swiper-pagination"></div>
                    </div>
                </div>  
            </div>
        ))}

    </div>
</section>

<script type="module">// Importa Swiper dalla CDN come modulo ES
    import Swiper from 'https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.mjs'

    document.addEventListener("DOMContentLoaded", () => {
        let n = 1;
        while (true) {
            const selector = `.mySwiperTextSlide-${n}`;
            const swiperEl = document.querySelector(selector);

            // Se non esiste, esci dal ciclo
            if (!swiperEl) break;

            new Swiper(swiperEl, {
                autoplay: {
                    delay: Math.floor(Math.random() * (3000 - 2000 + 1)) + 2000,
                    disableOnInteraction: false,
                },
                loop: true,
                slidesPerView: 1,
                spaceBetween: 52,
                grabCursor: true,
                pagination: {
                    el: swiperEl.querySelector(".swiper-pagination"),
                    clickable: true,
                },
                breakpoints: {
                    640: { slidesPerView: 1, spaceBetween: 52 },
                    768: { slidesPerView: 1, spaceBetween: 52 },
                    1024: { slidesPerView: 1, spaceBetween: 52 },
                }
            });

            n++; // passa al successivo .mySwiperTextSlide-n
        }
    });
</script>