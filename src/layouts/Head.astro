---
import RichText from '../components/core/RichText.astro';
import 'bootstrap/dist/css/bootstrap.css';
import fetchApi from '../lib/strapi';

import { SEO } from "astro-seo";

const { pd, landingID } = Astro.props;

interface openGraph {
  basic: {
    title: string;
    type: string;
    image: string;
    url: string;
  },
  optional?: {
    audio?: string;
    description?: string;
    determiner?: string;
    locale?: string;
    localeAlternate?: Array<string>;
    siteName?: string;
    video?: string;
  }
};

interface Seo {
    seo: {
        id: number,
        metaTitle: string,
        metaDescription: string,
        keywords: string,
        metaRobots: string,
        metaImage: {
            id: number,
            documentId: string,
            name: string,
            alternativeText: string,
            caption: string,
            width: number,
            height: number,
            formats: {
                thumbnail: {
                    name: string,
                    hash: string,
                    ext: string,
                    mime: string,
                    width: number,
                    height: number,
                    size: number,
                }
                small: {
                    name: string,
                    hash: string,
                    ext: string,
                    mime: string,
                    width: number,
                    height: number,
                    size: number,
                }
            },
            hash: string,
            ext: string,
            mime: string,
            size: number,
            url: string,
            previewUrl: string,
            provider: string,
            provider_metadata: string,
            created_at: string,
            updated_at: string,
            publishedAt: string,
            revisedAt: string,
        },
        metaSocial: [
            {
                id: number,
                socialNetwork: string,
                title: string,
                description: string,
                image: any[],
            },
        ],
    }
};

interface Code {
    content: [
        {
            __component: string,
            head: string,
            body: string,
        }
    ]
};

/**
 * esempio link chiamata API
 * http://localhost:1337/api/landing-pages/yd9u9u9k5wtvej3e8sv0uf3h?populate[content][on][shared.slider-clienti][populate]=cliente.logo&populate[content][on][shared.slider-clienti][populate]=cliente.link
 */
 const pageData: Seo = await fetchApi({
	endpoint: `landing-pages/${landingID}`, 
	page: '', 
	wrappedByKey: 'data',
    query: {}, 
    wrappedByList: false, 
    locale: '', 

    // popolare con il nome del contenitore dinamico solo nel caso si voglia popolare un componente al suo interno a un livello dal secondo in poi
    secondLevel: 'seo', 
    secondLevelQuery: '', 
    secondLevelTarget: '', 
    /* populateDeep: {
        'populate[0]': 'seo',
        'populate[1]': 'seo.metaSocial',
        'populate[2]': 'seo.metaSocial.image',
    } */
});

const codeData: Code = await fetchApi({
	endpoint: `landing-pages/${landingID}`, 
	page: '', 
	wrappedByKey: 'data',
    query: {}, 
    wrappedByList: false, 
    locale: '', 

    // popolare con il nome del contenitore dinamico solo nel caso si voglia popolare un componente al suo interno a un livello dal secondo in poi
    secondLevel: '', 
    secondLevelQuery: '', 
    secondLevelTarget: '', 
});

const sitoUrl = import.meta.env.STRAPI_URL;
const seo = pageData ? pageData.seo : null;
const metaSocialGeneric = seo ? seo.metaSocial[0] : '';
const metaSocialTwitter = seo && seo.metaSocial.length > 1 ? seo.metaSocial[1] : metaSocialGeneric;

const code:any[] = [];

//console.log(codeData.content);

codeData.content.map((cd) => (
    cd.__component === 'shared.codice' && code.push(cd)
));

//console.log(code[0].head);
---

<head>

    <SEO 
        title={seo ? seo.metaTitle : ''}
        titleDefault="Destination Marketing | HappyMinds"
        description={seo ? seo.metaDescription : ''}
        noindex={seo ? ( seo.metaRobots ? ( seo.metaRobots.includes('noindex') ? true : false ) : false ) : false}
        nofollow={seo ? ( seo.metaRobots ? ( seo.metaRobots.includes('nofollow') ? true : false ) : false ) : false}
        openGraph={{
        basic: {
            title: metaSocialGeneric ? metaSocialGeneric.title : '',
            type: "website",
            image: metaSocialGeneric ? sitoUrl+metaSocialGeneric.image[0].url : '',
            url: Astro.url.href,
        },
        optional: {
            description: metaSocialGeneric ? metaSocialGeneric.description : '',
            locale: 'it',
        }
        }}
        extend={{
        // extending the default link tags
        link: [{ rel: "image/x-icon", href: "/favicon.ico" }],
        // extending the default meta tags
        meta: [
            {
            name: "twitter:image",
            content: metaSocialTwitter ? sitoUrl+metaSocialTwitter.image[0].url : '',
            },
            { name: "twitter:title", content: metaSocialTwitter ? metaSocialTwitter.title : '' },
            { name: "twitter:description", content: metaSocialTwitter ? metaSocialTwitter.description : '' },
        ],
        }}
    />

    <meta name="generator" content={Astro.generator} />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"/>

    {code[0] && code[0].head &&
    code.map((cd) => (
    <Fragment set:html={cd.head} />
    ))}
    
</head>